
  some(head)(tail)(vSome)(vNone) {
    vSome(head)(tail)
  }

  none(vSome)(vNone) {
    vNone
  }


  hasSome(stream) {
    stream
      ((head)(tail) {
        true
      })
      (false)
  }

  hasNone(stream) {
    not(hasSome(stream))
  }

  maybeHead(stream) {
    stream
      ((head)(tail) { something(head) })
      (nothing)
  }

  maybeTail(stream) {
    stream
      ((head)(tail) { something(tail) })
      (nothing)
  }

  equal(equalElements)(streamA)(streamB) {
    streamA
      ((headA)(tailA) {
        streamB
          ((headB)(tailB) {
            and
              (equalElements(headA)(headB))
              (equal(equalElements)(tailA)(tailB))
          })
          (false)
      })
      (hasNone(streamB))
  }


  single(element) {
    some(element)(none)
  }

  repeat(stream) {
    hasSome(stream)
      (prepend(stream)(repeat(stream)))
      (none)
  }

  repeatSingle(element) {
    some
      (element)
      (repeatSingle(element))
  }

  iterate(next)(first) {
    some
      (first)
      (iterate(next)(next(first)))
  }


  each(transform)(stream) {
    stream
      ((head)(tail) {
        some
          (transform(head))
          (each(transform)(tail))
      })
      (none)
  }

  reduce(sum)(add)(stream) {
    stream
      ((head)(tail) {
        reduce
          (add(head)(sum))
          (add)
          (tail)
      })
      (sum)
  }

  reduceEager(sum)(add)(stream) {
    stream
      ((head)(tail) {
        EAGER(reduceEager)
          (add(head)(sum))
          (add)
          (tail)
      })
      (sum)
  }

  filter(predicate)(stream) {
    stream
      ((head)(tail) {
        predicate(head)
          (some(head)(filter(predicate)(tail)))
          (filter(predicate)(tail))
      })
      (none)
  }

  limit(n)(stream) {
    moreThan(0)(n)
      (stream
        ((head)(tail) {
          some(head)(limit(decrement(n))(tail))
        })
        (none))
      (none)
  }

  skip(n)(stream) {
    moreThan(0)(n)
      (stream
        ((head)(tail) {
          skip(decrement(n))(tail)
        })
        (none))
      (stream)
  }

  while(predicate)(stream) {
    stream
      ((head)(tail) {
        predicate(head)
          (some(head)(while(predicate)(tail)))
          (none)
      })
      (none)
  }

  append(secondStream)(stream) {
    stream
      ((head)(tail) {
        some(head)(append(secondStream)(tail))
      })
      (secondStream)
  }

  prepend {
    flip(append)
  }

  flatten(streams) {
    streams
      ((head)(tail) {
        prepend(head)(flatten(tail))
      })
      (none)
  }

  transpose(streams) {
    hasSome(streams)
      (some
        (streams.each(maybeHead).unmaybe)
        (transpose(streams.each(maybeTail).unmaybe))
      )
      (none)
  }

  unmaybe(stream) {
    stream
      ((head)(tail) {
        head
          ((element){ some(element)(unmaybe(tail)) })
          (unmaybe(tail))
      })
      (none)
  }

  length {
    reduce(0)(constant(increment))
  }

  contains(predicate)(stream){
    stream
      .filter(predicate)
      .hasSome
  }

  startsWith(equal)(prefix)(stream) {
    prefix
      ((prefixHead)(prefixTail) {
        stream
          ((head)(tail) {
            and
              (equal(prefixHead)(head))
              (startsWith(equal)(prefixTail)(tail))
          })
          (false)
      })
      (true)
  }

  reverse {
    reduce(none)(some)
  }

  sort(comparator)(stream) {
    stream
      ((head)(tail) {
        single(head)
          .prepend(tail
            .filter(negate(comparator(head)))
            .sort(comparator))
          .append(tail
            .filter(comparator(head))
            .sort(comparator))
      })
      (none)
  }

  at(index)(stream) {
    atLeast(0)(index)
      (stream.skip(index).first)
      (nothing)
  }

  first(stream) {
    stream
      ((head)(tail){ something(head) })
      (nothing)
  }
