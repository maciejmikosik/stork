
  equal {
    doubly(eager)(opEqual)
  }

  moreThan {
    doubly(eager)(opCompare)
  }

  lessThan {
    flip(moreThan)
  }

  atLeast(min)(number) {
    not(lessThan(min)(number))
  }

  atMost(max)(number) {
    not(moreThan(max)(number))
  }

  within(min)(max)(number) {
    and
      (atLeast(min)(number))
      (atMost(max)(number))
  }

  negate {
    eager(opNegate)
  }

  add {
    doubly(eager)(opAdd)
  }

  subtract(x) {
    add(negate(x))
  }

  increment {
    add(1)
  }

  decrement {
    subtract(1)
  }

  multiply {
    doubly(eager)(opMultiply)
  }

  divideBy {
    doubly(eager)(flip(opDivide))
  }

  modulo(divisor)(dividend) {
    subtract
      (multiply(divisor)(divideBy(divisor)(dividend)))
      (dividend)
  }

  signum {
    compose
      (if(moreThan(0))(constant(1)))
      (if(lessThan(0))(constant(-1)))
  }

  absolute {
    if(lessThan(0))(negate)
  }

  relu {
    floor(0)
  }

  ceil(max) {
    if(moreThan(max))(constant(max))
  }

  floor(min) {
    if(lessThan(min))(constant(min))
  }

  clamp(min)(max) {
    compose(ceil(max))(floor(min))
  }

  format {
    formatBase(10)
  }

  formatBase(base)(number) {
    equal(0)(number)
      ("0")
      (prepend
        (lessThan(0)(number)("-")(""))
        (formatBasePositive(base)(absolute(number))))
  }

  formatBasePositive(base)(number) {
    equal(0)(number)
      ("")
      (append
        (single(formatDigit(modulo(base)(number))))
        (formatBasePositive(base)(divideBy(base)(number))))
  }

  formatDigit(digit) {
    lessThan(10)(digit)
      (add(48)(digit))
      (add(55)(digit))
  }
