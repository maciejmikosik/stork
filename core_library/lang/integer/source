
  equal {
    doubly(EAGER)(EQUAL)
  }

  moreThan {
    doubly(EAGER)(COMPARE)
  }

  lessThan {
    flip(moreThan)
  }

  atLeast(threshold)(number) {
    not(lessThan(threshold)(number))
  }

  atMost(threshold)(number) {
    not(moreThan(threshold)(number))
  }

  negate {
    EAGER(NEGATE)
  }

  add {
    doubly(EAGER)(ADD)
  }

  subtract(x) {
    add(negate(x))
  }

  increment {
    add(1)
  }

  decrement {
    subtract(1)
  }

  multiply {
    doubly(EAGER)(MULTIPLY)
  }

  divideBy {
    doubly(EAGER)(flip(DIVIDE))
  }

  modulo(divisor)(dividend) {
    subtract
      (multiply(divisor)(divideBy(divisor)(dividend)))
      (dividend)
  }

  sign(number) {
    moreThan(0)(number)
      (1)
      (lessThan(0)(number)
        (-1)
        (0))
  }

  absolute(number) {
    lessThan(0)(number)
      (negate(number))
      (number)
  }

  makeAtLeast(minimum)(number) {
    atLeast(minimum)(number)
      (number)
      (minimum)
  }

  makeAtMost(maximum)(number) {
    atMost(maximum)(number)
      (number)
      (maximum)
  }

  relu {
    makeAtLeast(0)
  }

  format {
    formatBase(10)
  }

  formatBase(base)(number) {
    equal(0)(number)
      ("0")
      (prepend
        (lessThan(0)(number)("-")(""))
        (formatBasePositive(base)(absolute(number))))
  }

  formatBasePositive(base)(number) {
    equal(0)(number)
      ("")
      (append
        (single(formatDigit(modulo(base)(number))))
        (formatBasePositive(base)(divideBy(base)(number))))
  }

  formatDigit(digit) {
    lessThan(10)(digit)
      (add(48)(digit))
      (add(55)(digit))
  }
