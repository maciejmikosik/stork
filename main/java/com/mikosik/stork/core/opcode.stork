
  build {
    module
      (exportAs("stork.opcode.opArg")("opArg"))
      (exportAs("stork.opcode.opArg2")("opArg2"))
      (exportAs("stork.opcode.opNegate")("opNegate"))
      (exportAs("stork.opcode.opAdd")("opAdd"))
      (exportAs("stork.opcode.opEqual")("opEqual"))
      (exportAs("stork.opcode.opMoreThan")("opMoreThan"))

      (exportAs("private.stork.opcode.opReorder")("opReorder"))
  }

  opArg(function)(argument) {
    implementedByRuntime
  }

  opArg2(f)(x)(y) {
    opArg
      (opArg
        (opReorder(f))
        (y))
      (x)
  }

  opReorder(f)(x)(y) {
    f(y)(x)
  }

  opNegate(x) {
    implementedByRuntime
  }

  opAdd(x)(y) {
    implementedByRuntime
  }

  opEqual(x)(y) {
    implementedByRuntime
  }

  opMoreThan(x)(y) {
    implementedByRuntime
  }
