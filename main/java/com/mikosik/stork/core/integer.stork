
  build {
    module
      (exportAs("stork.integer.equal")("equal"))
      (exportAs("stork.integer.moreThan")("moreThan"))
      (exportAs("stork.integer.lessThan")("lessThan"))
      (exportAs("stork.integer.atLeast")("atLeast"))
      (exportAs("stork.integer.atMost")("atMost"))
      (exportAs("stork.integer.within")("within"))
      (exportAs("stork.integer.add")("add"))
      (exportAs("stork.integer.negate")("negate"))
      (exportAs("stork.integer.subtract")("subtract"))
      (exportAs("stork.integer.increment")("increment"))
      (exportAs("stork.integer.decrement")("decrement"))
      (exportAs("stork.integer.ceiling")("ceiling"))
      (exportAs("stork.integer.floor")("floor"))
      (exportAs("stork.integer.clamp")("clamp"))

      (import("stork.function.flip"))
      (import("stork.boolean.not"))
      (import("stork.boolean.and"))

      (importAs("javaNegate")("stork.java.math.BigInteger.negate"))
      (importAs("javaAdd")("stork.java.math.BigInteger.add"))
      (importAs("javaEquals")("stork.java.math.BigInteger.equals"))
      (importAs("javaCompareTo")("stork.java.math.BigInteger.compareTo"))
  }

  equal {
    javaEquals
  }

  moreThan(x)(y) {
    equal(1)(javaCompareTo(x)(y))
  }

  lessThan {
    flip(moreThan)
  }

  atLeast(min)(number) {
    not(lessThan(min)(number))
  }

  atMost(max)(number) {
    not(moreThan(max)(number))
  }

  within(min)(max)(number) {
    and
      (atLeast(min)(number))
      (atMost(max)(number))
  }

  add {
    javaAdd
  }

  negate {
    javaNegate
  }

  subtract(x) {
    add(negate(x))
  }

  increment {
    add(1)
  }

  decrement {
    subtract(1)
  }

  ceiling(max)(number) {
    moreThan(max)(number)
      (max)
      (number)
  }

  floor(min)(number) {
    lessThan(min)(number)
      (min)
      (number)
  }

  clamp(min)(max)(number) {
    ceiling(max)(floor(min)(number))
  }
