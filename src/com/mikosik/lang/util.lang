
  self(x) {
    x
  }

  flip(f)(x)(y) {
    f(y)(x)
  }


  true(then)(else) {
    then
  }

  false(then)(else) {
    else
  }

  not(bool) {
    bool(false)(true)
  }

  and(a)(b) {
    a(b)(false)
  }

  or(a)(b) {
    a(true)(b)
  }


  present(element)(vPresent)(vAbsent) {
    vPresent(element)
  }

  absent(vPresent)(vAbsent) {
    vAbsent
  }

  else(default)(optional) {
    optional
      (self)
      (default)
  }


  some(head)(tail)(vSome)(vNone) {
    vSome(head)(tail)
  }

  none(vSome)(vNone) {
    vNone
  }

  reduce(sum)(add)(stream) {
    stream
      ((head)(tail) {
        reduce
          (add(head)(sum))
          (add)
          (tail)
      })
      (sum)
  }

  length(stream) {
    stream
      ((head)(tail){ add(1)(length(tail)) })
      (0)
  }

  single(element) {
    some(element)(none)
  }

  repeat(element) {
    some
      (element)
      (repeat(element))
  }

  first(stream) {
    stream
      ((head)(tail){ present(head) })
      (absent)
  }

  limit(n)(stream) {
    moreThan(0)(n)
      (stream
        ((head)(tail) {
          some(head)(limit(decrement(n))(tail))
        })
        (none)
      )
      (none)
  }

  skip(n)(stream) {
    moreThan(0)(n)
      (stream
        ((head)(tail) {
          skip(decrement(n))(tail)
        })
        (none)
      )
      (stream)
  }

  filter(condition)(stream) {
    stream
      ((head)(tail) {
        condition(head)
          (some(head)(filter(condition)(tail)))
          (filter(condition)(tail))
      })
      (none)
  }

  while(condition)(stream) {
    stream
      ((head)(tail) {
        condition(head)
          (some(head)(while(condition)(tail)))
          (none)
      })
      (none)
  }

  contains(condition)(stream){
    stream
      ((head)(tail) {
        or
          (condition(head))
          (contains(condition)(tail))
      })
      (false)
  }

  find(condition)(stream) {
    first(filter(condition)(stream))
  }

  each(transform)(stream) {
    stream
      ((head)(tail) {
        some
          (transform(head))
          (each(transform)(tail))
      })
      (none)
  }

  reverse {
    reduce(none)(some)
  }

  append(end)(stream) {
    stream
      ((head)(tail) {
        some(head)(append(end)(tail))
      })
      (end)
  }

  prepend {
    flip(append)
  }

  flatten {
    reduce(none)(append)
  }

  generate(next)(current) {
    some
      (current)
      (generate(next)(next(current)))
  }

  for(initial)(condition)(next) {
    while(condition)(generate(next)(initial))
  }

  count {
    countFrom(0)
  }

  countFrom {
    generate(increment)
  }


  lessThan {
    flip(moreThan)
  }

  atLeast(min)(number) {
    not(lessThan(min)(number))
  }

  atMost(max)(number) {
    not(moreThan(max)(number))
  }

  within(min)(max)(number) {
    and
      (atLeast(min)(number))
      (atMost(max)(number))
  }

  subtract(x) {
    add(negate(x))
  }

  increment {
    add(1)
  }

  decrement {
    subtract(1)
  }

  ceiling(max)(number) {
    moreThan(max)(number)
      (max)
      (number)
  }

  floor(min)(number) {
    lessThan(min)(number)
      (min)
      (number)
  }

  clamp(min)(max)(number) {
    ceiling(max)(floor(min)(number))
  }
