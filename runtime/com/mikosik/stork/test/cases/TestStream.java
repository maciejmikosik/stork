package com.mikosik.stork.test.cases;

import static com.mikosik.stork.test.SnippetTest.snippetTest;
import static com.mikosik.stork.test.StreamTest.streamTest;
import static org.quackery.Suite.suite;

import org.quackery.Test;

public class TestStream {
  public static Test testStream() {
    return suite("stream")
        .add(streamTest("constructor")
            .importing("lang.stream.some")
            .importing("lang.stream.none")
            .test("some(120)(some(121)(some(122)(none)))", "xyz")
            .test("none", ""))
        .add(streamTest("single")
            .importing("lang.stream.single")
            .test("single(120)", "x"))
        .add(streamTest("repeat")
            .importing("lang.stream.repeat")
            .importing("lang.stream.limit")
            .test("limit(5)(repeat(120))", "xxxxx"))
        .add(streamTest("array")
            .importing("lang.stream.array")
            .importing("lang.stream.limit")
            .test("array(0)", "")
            .test("array(1)(97)", "a")
            .test("array(2)(97)(98)", "ab")
            .test("array(3)(97)(98)(99)", "abc"))
        .add(streamTest("generate")
            .importing("lang.stream.generate")
            .importing("lang.stream.limit")
            .importing("lang.integer.add")
            .test("limit(10)(generate(add(1))(97))", "abcdefghij"))
        .add(streamTest("prepend")
            .importing("lang.stream.prepend")
            .test("prepend('x')('abc')", "xabc")
            .test("prepend('x')('')", "x"))
        .add(streamTest("append")
            .importing("lang.stream.append")
            .test("append('x')('abc')", "abcx")
            .test("append('x')('')", "x"))
        .add(streamTest("reverse")
            .importing("lang.stream.reverse")
            .test("reverse('abcde')", "edcba")
            .test("reverse('')", ""))
        .add(streamTest("each")
            .importing("lang.stream.each")
            .importing("lang.integer.add")
            .test("each(add(1))('ace')", "bdf")
            .test("each(add(1))('')", ""))
        .add(streamTest("filter")
            .importing("lang.stream.filter")
            .importing("lang.integer.moreThan")
            .test("filter(moreThan(100))('axbycz')", "xyz")
            .test("filter(moreThan(100))('xyz')", "xyz")
            .test("filter(moreThan(100))('')", ""))
        .add(streamTest("limit")
            .importing("lang.stream.limit")
            .test("limit(5)('abcde')", "abcde")
            .test("limit(4)('abcde')", "abcd")
            .test("limit(6)('abcde')", "abcde")
            .test("limit(0)('abcde')", "")
            .test("limit(0)('')", ""))
        .add(streamTest("skip")
            .importing("lang.stream.skip")
            .test("skip(4)('abcde')", "e")
            .test("skip(5)('abcde')", "")
            .test("skip(6)('abcde')", "")
            .test("skip(0)('abcde')", "abcde")
            .test("skip(-1)('abcde')", "abcde"))
        .add(streamTest("while")
            .importing("lang.stream.while")
            .importing("lang.integer.lessThan")
            .test("while(lessThan(110))('abcde')", "abcde")
            .test("while(lessThan(110))('xabcde')", "")
            .test("while(lessThan(110))('abcxde')", "abc")
            .test("while(lessThan(110))('abcdex')", "abcde")
            .test("while(lessThan(110))('x')", "")
            .test("while(lessThan(110))('')", ""))
        .add(streamTest("for")
            .importing("lang.stream.for")
            .importing("lang.integer.add")
            .importing("lang.integer.lessThan")
            .test("for(97)(lessThan(107))(add(1))", "abcdefghij")
            .test("for(97)(lessThan(97))(add(1))", ""))
        .add(streamTest("reduce")
            .importing("lang.stream.reduce")
            .importing("lang.stream.append")
            .importing("lang.stream.some")
            .importing("lang.stream.none")
            .test("reduce('a')(append)(some('x')(some('y')(some('z')(none))))", "axyz")
            .test("reduce('')(append)(none)", ""))
        .add(streamTest("flatten")
            .importing("lang.stream.flatten")
            .importing("lang.stream.some")
            .importing("lang.stream.none")
            .test("flatten(some('abc')(some('de')(some('f')(none))))", "abcdef")
            .test("flatten(some('abc')(none))", "abc")
            .test("flatten(some('')(some('')(some('')(none))))", "")
            .test("flatten(some('')(none))", "")
            .test("flatten(some('abc')(some('')(some('def')(none))))", "abcdef")
            .test("flatten(none)", ""))
        .add(snippetTest("contains")
            .importing("lang.integer.equal")
            .importing("lang.boolean.false")
            .importing("lang.boolean.true")
            .importing("lang.stream.contains")
            .test(escape("contains(equal(0))('xyz')"), "false")
            .test(escape("contains(equal(120))('xyz')"), "true"))
        .add(snippetTest("tryAt")
            .importing("lang.stream.tryAt")
            .importing("lang.stream.some")
            .importing("lang.stream.none")
            // TODO fix index out of bounds
            // .test("tryAt(-1)(some(10)(some(20)(some(30)(none))))((x){x})(99)", "99")
            .test("tryAt(0)(some(10)(some(20)(some(30)(none))))((x){x})(99)", "10")
            .test("tryAt(1)(some(10)(some(20)(some(30)(none))))((x){x})(99)", "20")
            .test("tryAt(2)(some(10)(some(20)(some(30)(none))))((x){x})(99)", "30")
            .test("tryAt(3)(some(10)(some(20)(some(30)(none))))((x){x})(99)", "99")
            .test("tryAt(0)(none)((x){x})(99)", "99"))
        .add(snippetTest("tryFirst")
            .importing("lang.stream.tryFirst")
            .importing("lang.stream.some")
            .importing("lang.stream.none")
            .test("tryFirst(some(10)(some(20)(some(30)(none))))((x){x})(99)", "10")
            .test("tryFirst(none)((x){x})(99)", "99"))
        .add(snippetTest("length")
            .importing("lang.stream.length")
            .test(escape("length('')"), "0")
            .test(escape("length('xyz')"), "3"))
        .add(streamTest("count")
            .importing("lang.stream.count")
            .importing("lang.stream.limit")
            .importing("lang.stream.each")
            .importing("lang.integer.add")
            .test("each(add(97))(limit(5)(count))", "abcde"))
        .add(streamTest("countFrom")
            .importing("lang.stream.countFrom")
            .importing("lang.stream.limit")
            .test("limit(5)(countFrom(97))", "abcde"));
  }

  private static String escape(String string) {
    return string.replace('\'', '\"');
  }
}
